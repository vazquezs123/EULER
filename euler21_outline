1. get list of divisors for each number under limit
	- d(input) = sum(getDivisors(input))
	- list getDivisors(input){
		List divisors;
		limit = (input % 2 == 0) ? input / 2 : input / 3;
		for(int i = 0; i <= limit; i++{ // if even only need to check up until have of input size, else 1/3 of input size
			if( input % i == 0 )
				divisors.append(i);
		}
		return divisors;
		}

2. Get sum of divisor list
	- long int getDivisorsSum(list divisors){
		long int sum = 0;
		for(int i = 0; i < list.length; i++){
			sum = sum + list[i];
		}
		return sum;
	  }


3. associate sum of divisors of input with input as key (main program)
	  <hashMap> divisorsSum(int input){
			<hashmap> inputDivisorSum; // map of input to its output so d(a) to b, where d(a) = b
			for(int i = 0; i <= input; i++){
				inputDivisorSum.add(i,getDivisorSum(i,getDivisors()))
			}
			return inputDivisorSum;
	 	}

4. compare each numbers inputDivisorSum
list getAmicableNumbers(long int limit, <hashmap> inputDivisorsSum){
	list amicableNumbers;
	for(int a = 0; a < limit; a++){
			for(int b = 0; b < limit; b++){
				if(a == divisorsSum(b) && b == divisorSum(a)){ // if match
					amicableNumbers.append(a);
				}
			}
		}
}


1. get list of d(a), this will give me all b ex. d(a) = b
	for(int a = 0; a < limit; a++){
		getSum(
	}
2. now I have all b that is d(a) maps to, so now get list of d(b), will give list of a
3. for 

